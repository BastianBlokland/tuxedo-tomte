#!/usr/bin/perl -w
use strict qw(vars subs);
use warnings;

# TODO change before delivery
my $grubFile = '/etc/default/grub';
my $logDir = '/var/log/tuxedo/';
# my $logDir = '/var/log/TUXEDO/tmp/tomte/';
my $logFile = $logDir.'tomte.log';
my $LOGFILE;
my $noLogFile = 1;		# 0 = logFile ok, 1 = no logFile
my $noConfigFile = 1;	# 0 = configfile ok, 1 = no configfile
my $configDir = '/etc/tomte/';
# my $configDir = '/home/pablo/TUXEDO/tmp/tomte/';
my $configFile = $configDir.'tomte.cfg';


# TODO just for debug, delete afterwards
use Data::Dumper qw(Dumper);

# TODO for EDID, comming next
# for OLED backlight and edid decrypt
#use FindBin qw($Bin);
#use lib "$Bin/.";
#use Parse::EDID qw(parse_edid);



###############################################################################
# initial definition of post configuration modules
#   command		the command to be executed on the system
#   trigger		'1' / 'undef' wether the command should be executed
#   state		'undef' / 'failed' wether the command execution failed

my %postConfProgram = (
	updateGrub => {
		command => 'update-grub',
		trigger => 'undef',
		state => 'undef',
		description => "builds grub configuration from grub file",
	},
);


###############################################################################
# initial definition of all origConfModules/packages
# defined by a 'short name' which is the name without '-'
# e.g. no-boot-on-battery = nobootonbattery
#   name			name of package or name of solution,
#   				is 'short name' without '-'
#   version			the package or solution version
#   installed		'no' not installed / 'yes' installed / 'failed' failed to install
#   				'undef' if unknown
#   blacklisted		'yes' or 'no' will not be configured on upgrade, install or deinstall
#   				'undef' if unknown
#   required		'yes' or 'no' the system requirements are met
#   				'undef' if unknown
#   hwid			the environment (HW or SW) are in a certain defined state
#   package			'yes' or 'no', there is a deb or rpm package as a solution
#   fainame			the name to give to FAI to install a certain package
#   description		A description about the module for the user
#   postconf		command module to execute after installation of module, empty if none
#   				the command of the module is defined in	$postConfModule{$postconf}{command}

my %origConfModules = (
	#	tuxedokeyboard => {
	#		name => 'tuxedo-keyboard',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 1,
	#		fainame => 'a',
	#		description => '',
	#	},
	#	tuxedoccwmi => {
	#		name => 'tuxedo-cc-wmi',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 1,
	#		fainame => '',
	#		description => '',
	#	},
	#	tuxedocontrolcenter => {
	#		name => 'tuxedo-control-center',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 1,
	#		fainame => '',
	#		description => '',
	#	},
	#	tuxedoxpxcairplanemodefix => {
	#		name => 'tuxedo-xp-xc-airplane-mode-fix',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 1,
	#		fainame => 'AIRPLANEFIX NOGRUB',
	#		description => '',
	#	},
	#	tuxedorestoreaudiofix => {
	#		name => 'tuxedo-restore-audio-fix',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 1,
	#		fainame => 'AUDIORESTOREFIX',
	#		description => '',
	#	},
	#	tuxedoucsiccg => {
	#		name => 'tuxedo-ucsi_ccg',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 1,
	#		fainame => 'TUXUCIFIX',
	#		description => '',
	#	},
	#	tuxedooledbrt => {
	#		name => 'tuxedo-oled-brt',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 1,
	#		fainame => 'TUXOLED',
	#		description => '',
	#	},
	#	chassistype => {
	#		name => 'chassis-type',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => '',
	#		description => '',
	#	},
	#	kfocus => {
	#		name => 'kfocus',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'NOKFOCUS',
	#		description => '',
	#	},
	#	tuxedo => {
	#		name => 'tuxedo',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'NOTUXEDO',
	#		description => '',
	#	},
	#	manjaro => {
	#		name => 'manjaro',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'NOMANJARO',
	#		description => '',
	#	},
	#	aistation => {
	#		name => 'aistation',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'NOAISTATION',
	#		description => '',
	#	},
	#	bareboneclass => {
	#		name => 'barebone-class',
	#		version => 1,
	#		installed => 0,
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'HASHWELL BROADWELL SKYLAKE KABYLAKE COFFEELAKE',
	#		description => '',
	#	},
	#	barebonegrub => {
	#		name => 'barebone-grub',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'NOGRUB 02GRUB',
	#		description => '',
	#	},
	#	audiofix => {
	#		name => 'audiofix',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'AUDIOFIX',
	#		description => '',
	#	},
	#	fingerprint => {
	#		name => 'fingerprint',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'FINGERPRINT',
	#		description => '',
	#	},
	#	threeg => {
	#		name => 'threeg',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'THREEG',
	#		description => '',
	#	},
	#	hybrid => {
	#		name => 'hybrid',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'DISCRETE HYBRID',
	#		description => '',
	#	},
	#	nvidiadriver => {
	#		name => 'nvidia-driver',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'NVIDIATUX NVIDIANOR',
	#		description => '',
	#	},
	#	bluetooth => {
	#		name => 'bluetooth',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => 'BLUETOOTH',
	#		description => '',
	#	},
	#	tuxedowallpapers => {
	#		name => 'tuxedo-wallpapers',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => '',
	#		description => '',
	#	},
	#	tuxedoplymouthone => {
	#		name => 'tuxedo-plymouth-one',
	#		version => 1,
	#		installed => 0,
	#		blacklisted => 0,
	#		required => 0,
	#		hwid => 1,
	#		package => 0,
	#		fainame => '',
	#		description => '',
	#	},

	i8042fix => {
		name => 'i8042-fix',
		version => 1,
		installed => 'undef',
		blacklisted => 'undef',
		required => 'undef',
		hwid => 1,
		package => 'no',
		fainame => '',
		description => 'Fix for no-keyboard-present after boot on XC1711',
		postconf => 'updateGrub',
	},
	nobootonbattery => {
		name => 'no-boot-on-battery',
		version => 1,
		installed => 'undef',
		blacklisted => 'undef',
		required => 'undef',
		hwid => 1,
		package => 'no',
		fainame => '',
		description => 'Fix for no-boot-on-battery on BA15',
		postconf => 'updateGrub',
    },
);


# hash to load the configfile
my %localConfModules = %origConfModules;


# empty hash, will be filled with successfully installed modules
# as hashes: {modulename}{status}
# where status can be "ok" or "failed"
my %configuredModules;


# initialize logFile
# create one if not existing already
# exits program if logfile can not be created
sub initLogging {

	# do not log if not necessary (logging requires root)
	if (@ARGV == 0) {
		return;
	}
	if ($ARGV[0] ne ("list" || "configure" || "reconfigure" ||
			"remove" || "blacklist" || "unblacklist" || "update")) {
	   	return;
	}
	my $timestamp;
	# create logDir if it does not exist
	unless ( -d $logDir ) {
		mkdir($logDir, 0755);
		unless ( -d $logDir ) {
			$noLogFile = 1;
			print "Could not create $logDir\n";
			exit (0);
		}
	}
	if ( -f $logFile ) {
		# append if logFile exists
		if ( open $LOGFILE, '>>'.$logFile )
		{
			$noLogFile = 0;
			$timestamp = getLoggingTime();
			print $LOGFILE "$timestamp start logging\n";
			close $LOGFILE;
			return;
		} else {
			$noLogFile =1;
			print "Could not open logFile $logFile\n";
			exit (0);
		}
	} else {
		# create a new logFile
		if ( open $LOGFILE, '>'.$logFile ) {
			$noLogFile = 0;
			$timestamp = getLoggingTime();
			print $LOGFILE "$timestamp start logging\n";
			close $LOGFILE;
			return;
		} else {
			$noLogFile =1;
			print "Could not create logFile $logFile\n";
			exit (0);
		}
	}
}


sub getLoggingTime {
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $nice_timestamp = sprintf ( "%04d%02d%02d %02d:%02d:%02d",
									$year+1900,$mon+1,$mday,$hour,$min,$sec);
	return $nice_timestamp;
}


# to print into logFile
sub printLog {
	my $message = shift;
	if (! $noLogFile) {
		if (open $LOGFILE, '>>'.$logFile) {
			my $timestamp = getLoggingTime();
			print $LOGFILE "$timestamp $message\n";
			close $LOGFILE;
		}
	}
}




# fills global variable %localConfModules with data from $configFile
# if there is no configFile then it is left empty
# exits program if configfile can not be read
sub readConfigFile {
	my %comp;
	my $FH;
	my $shortname;
	if ( open $FH, '<', $configFile ) {
		while ( my $line=<$FH> ) {
			chomp $line;
			my ($name, @cols) = split /\s+/, $line;
			$shortname = $name;
			$shortname =~ s/[^a-zA-Z0-9]//g;
			# @comp values have to be same as in writeConfigFile
			@comp{qw(name version installed blacklisted required hwid package)} = ($name, @cols);
			$localConfModules{$shortname} = { %comp };
		}
		close $FH;
	} else {
		printLog("could not open configFile: $configFile $!");
		print "Could not open configfile $configFile\n";
		exit (0);
	}
}


# TODO changes!!
# overwrites $configFile with data from $origConfModules
# if file cannot be written then nothing happens
# exits program if configfile can not be written
sub writeConfigFile {
	my $FH;
	if ( open $FH, '>', $configFile ) {
		foreach my $name (sort keys %origConfModules) {
			# values have to be same as in readConfigFile
			print $FH "$origConfModules{$name}{name} ".
					"$origConfModules{$name}{version} ".
					"$origConfModules{$name}{installed} ".
					"$origConfModules{$name}{blacklisted} ".
					"$origConfModules{$name}{required} ".
					"$origConfModules{$name}{hwid} ".
					"$origConfModules{$name}{package}\n";
		}
		close $FH;
	} else {
		printLog("can't write to $configFile $!");
		print "Can't write to configfile: $configFile\n";
		exit (0);
	}
}


# check if config file and directory exists
# loads the config or if non existent
# creates a new directory and configfile
sub initConfigFile {
	# create configDir if it does not exist
	unless ( -d $configDir ) {
		mkdir($configDir, 0755);
		unless ( -d $configDir ) {
			$noConfigFile = 1;
			printLog("could not create $configDir\n");
			print "Could not create $configDir\n";
			exit (0);
		}
	}
	# read config file
	if ( -f $configFile ) {
		$noConfigFile = 0;
		readConfigFile();
		return;
	} else {
		# create a new configFile
		printLog("no configfile present ... creating one\n");
		writeConfigFile();
		return;
	}
}


# searches the sysfs subdirectory for active monitor entries
# and returns them as an array
sub findActiveEDIDs {
	my $cards_dir = '/sys/class/drm';
	my $dir_handle;
	my @edidfile;

	if ( !opendir ($dir_handle, $cards_dir)) {
		printLog("unable to open $cards_dir: $!\n");
		return @edidfile;
	}
	my @FILES = grep { $_ ne '.' && $_ ne '..' } readdir($dir_handle);
	foreach my $file (@FILES) {
		my $path = "$cards_dir/$file";
		if ( -d $path ) {
			my $enabledfile = "$path/enabled";
			if ( -e $enabledfile ) {
				open(FILE, $enabledfile);
				$_ = <FILE>;
				close(FILE);
				if ($_ =~ /enabled/) {
					#print "enabled found under $path\n";
					my $statusfile = "$path/status";
					if ( -e $statusfile ) {
						open(FILE2, $statusfile);
						$_ = <FILE2>;
						if ($_ =~ /connected/) {
							push @edidfile, "$path/edid";
						}
					}
				}
			}
		}
	}
	return @edidfile;
}


# gets valid edid files
# converts edid data into an array of hash references to origConfModules
sub getEDIDData {
	my @edidfiles = findActiveEDIDs();
	my @edid_refs;
	my $fh;
	my $file_content;
	foreach ( @edidfiles ) {
		if ( open $fh, '<', $_ ) {
			$file_content = do { local $/; <$fh> };
			close $fh;
			push @edid_refs, parse_edid($file_content);
		} else {
			printLog("Could not open file $_ $!");
		}
	}

	# open $fh, '<', '/sys/class/drm/card0-HDMI-A-2/edid' or die "Can't open file $!\n";
	#my $file_content = do { local $/; <$fh> };
	#close $fh;
	# returns hashref to module
	#return parse_edid($file_content);

	# returns array of hash references to module
	return @edid_refs;
}


# check whether the module is required for the system
# checks only for hardware
sub checkRequirements {
	my $FH;
	my $boardname_filename = "/sys/class/dmi/id/board_name";
	my $boardname;
	my $boardvendor_filename = "/sys/class/dmi/id/board_vendor";
	my $boardvendor;

	# these will be installed on all notebooks, always
	#	$origConfModules{tuxedokeyboard}{required} = 1;
	#	$origConfModules{tuxedoccwmi}{required} =1 ;
	#	$origConfModules{tuxedocontrolcenter}{required} = 1;
	#	$origConfModules{tuxedotouchpadfix}{required} = 1;

	# load required data into variables
	if ( open $FH, "<", $boardvendor_filename ) {
		$boardvendor = <$FH>;
		close $FH;
	} else {
		printLog("could not open $boardname_filename $!");
	}
	if ( open $FH, "<", $boardname_filename ) {
		$boardname = <$FH>;
		close $FH;
	} else {
		printLog("could not open $boardvendor_filename $!");
	}
		#		if ( $boardvendor =~ m/TUXEDO/ ) {
		#			$origConfModules{tuxedo}{required} = 1;
			### close the program if it is not TUXEDO???
			#		}
			#		if ($boardname =~ m/(P95_96_97Ex_Rx|PB50_70RF_RD_RC|P9XXRC)/) {
			#			$origConfModules{tuxedoucsiccg}{required} = 1;
			#}
			#if ($boardname =~ m/(P95_96_97Ex_Rx|P9XXRC)/) {
			#	$origConfModules{kfocus}{required} = 1;
			#}
			#unless ($boardname =~ m/(N150ZU|N151ZU|N150CU|N151CU)/) {
			#	$origConfModules{manjaro}{required} = 1;
			#}
			#unless ($boardname =~ m/(P95_96_97Ex_Rx|PB50_70EF_ED_EC|PB50_70RF_RD_RC|P9XXRC|P7xxTM)/) {
			#	$origConfModules{aistation}{required} = 1;
			#}
			#if ($boardname =~ m/(P65_67RS|P65_67RP|P65xRP|P67xRP|P65xH|P65_P67H)/) {
			#	$origConfModules{barebonegrub}{required} = 1;
			#	$origConfModules{barebonegrub}{fainame} = '02GRUB';
			#}
			#if ($boardname =~ m/(P95)/) {
			#	$origConfModules{audiofix}{required} = 1;
			#}

	# check values for each module
	if ($boardname =~ m/(PB50_70DFx,DDx)/) {
		$origConfModules{i8042fix}{required} = 1;
	}
	if ($boardname =~ m/(PF5PU1G)/) {
		$origConfModules{nobootonbattery}{required} = 1;
	}

	#	my @edid = getEDIDData();
	#	foreach ( @edid ) {
	#		if ( $_ =~ m/SDC Model a029 Serial Number 0/ ) {
	#			$origConfModules{tuxedooledbrt}{required} = 1;
	#		}
	#	}
	#
	#	# by default DESKTOP
	#	$origConfModules{chassistype}{fainame} = 'DESKTOP';
	#	my $chassis_type_fn = '/sys/devices/virtual/dmi/id/chassis_type';
	#	if ( open $fh, "<", $chassis_type_fn ) {
	#		my $chassis_type = <fh>;
	#		close $fh;
	#		if ( $chassis_type =~ m/(9|10)/ ) {
	#			$origConfModules{chassistype}{fainame} = 'LAPTOP';
	#		} else {
	#			my $battery_folder = '/proc/acpi/battery';
	#			if ( opendir $fh, $battery_folder ) {
	#				while (my $file = readdir($fh)) {
	#					next unless (-d "$battery_folder/$file");
	#					unless ( $file =~ m/(\.|\.\.)/ ) {
	#						#print "folder: $file\n";
	#						$origConfModules{chassistype}{fainame} = 'LAPTOP';
	#					}
	#				}
	#			}
	#		}
	#		unless ( $origConfModules{chassistype}{fainame} =~ m/LAPTOP/ ) {
	#			my $acpi_string = 'ACPI: Battery Slot';
	#			my $dmesg_output = `dmesg`;
	#			if ( $dmesg_output =~ m/$acpi_string/ ) {
	#				$origConfModules{chassistype}{fainame} = 'LAPTOP';
	#			}
	#		}
	#	}
	#
	#	my @lsusb_output = `lsusb`;
	#	chomp @output;
	#	foreach my $line ( @output )
	#	{
	#		
	#	}
}



# print status from all packages
# in a nice formated output
# uses the data from the local configuration file
sub listStatus {
	my @arr = ( ['Name', 'Version', 'Installed', 'Blacklisted'] );
	my $module;
	my $none = 1;

	initConfigFile();
	foreach $module (sort keys %localConfModules) {
		# only show required modules
		if ($localConfModules{$module}{required} eq 'yes') {
			$none = 0;
			push(@arr,
				["$localConfModules{$module}{name}",
			 	"$localConfModules{$module}{version}",
			 	"$localConfModules{$module}{installed}",
			 	"$localConfModules{$module}{blacklisted}"]);
		}
		if (! $none) {
			for my $row (@arr) {
				format STDOUT =
@<<<<<<<<<<<<<<<<<<<<  @<<<<<<<<<<<<  @<<<<<<<<<<<<  @<<<<<<<<<<<<
				@$row
.
				write;
			}
		}
	}
	if ($none) {
		print "No fixes available for this system\n";
	}
}

# TODO delete dumping
# copies values from local configuration module into new configuration module
# copies always 'blacklisted'
sub transferConfigValues {
	my $name;
	print "before\n";
	print Dumper \%origConfModules;
	foreach $name (sort keys %localConfModules) {
		$origConfModules{$name}{blacklisted} = $localConfModules{$name}{blacklisted};
	}
	print "after";
	print Dumper \%origConfModules;
}


###############################################################################
###############################################################################
# each configure one module from %confModules
# they set 'installed' status and $postConfModule trigger

# for keyboard not present on boot
# for XC1711 on all distributions
# returns 0 if failed, 1 if success
sub i8042fix() {
	my $module = shift;
	my @kernel_parameters = ("i8042.nopnp");
	my $retval;
	printLog("applying i8042fix\n");
	$retval = insertGrub($module, \@kernel_parameters);
	if ($retval == 0) {
		$origConfModules{$module}{installed} = "failed";
		addToConfiguredModules($module, "failed");
	} else {
		$origConfModules{$module}{installed} = "yes";
		$postConfProgram{updateGrub}{trigger} = 1;
		addToConfiguredModules($module, "ok");
	}
}


# for not being able to boot if system is on battery
# affects BA15
# returns 0 if failed, 1 if success
sub nobootonbattery() {
	my $module = shift;
	my @kernel_parameters = ("iommu=soft");
	my $retval;
	printLog("applying nobootonbattery\n");
	$retval = insertGrub($module, \@kernel_parameters);
	if ($retval == 0) {
		$origConfModules{$module}{installed} = "failed";
		addToConfiguredModules($module, "failed");
	} else {
		$origConfModules{$module}{installed} = "yes";
		$postConfProgram{updateGrub}{trigger} = 1;
		addToConfiguredModules($module, "ok");
	}
}


# adds module hash to list of configured modules with status
sub addToConfiguredModules {
	my $module = shift;
	my $status = shift;
	my %configuredTmpModule = (
		$module => $status,
	);
	@configuredModules{keys %configuredTmpModule} = values %configuredTmpModule;
}


# inserts array values as kernel parameters if not present
# example: my $retval = insertGrub(\@kernel_parameters);
# returns number of inserted parameters
# return value of 0 means it failed
sub insertGrub {
    my $grubFH;
    my @grub_lines;
	my $module = shift;
    my $parameters = shift;
    my $parameter;
	my $inserted = 0;

    if ( open $grubFH, "<", $grubFile) {
        while (<$grubFH>) {
            push (@grub_lines, $_);
        }
        close $grubFH;
    } else {
        printLog("no $grubFile present or unable to open the file for reading\n");
		return (0);
    }

    foreach( @grub_lines ) {
        if ( $_ =~ m/^GRUB_CMDLINE_LINUX_DEFAULT="/ ) {
            foreach $parameter ( @{$parameters} ) {
                unless ( $_ =~ m/$parameter/ ) {
                    if ($_ =~ m/""/) {
                        $_ =~ s/^(GRUB_CMDLINE_LINUX_DEFAULT=".*)"\n/$1$parameter"\n/;
                        ++$inserted;
						printLog("inserted $parameter into grub\n");
                    } else {
                        $_ =~ s/^(GRUB_CMDLINE_LINUX_DEFAULT=".*)"\n/$1 $parameter"\n/;
                        ++$inserted;
						printLog("inserted $parameter into grub\n");
                    }
                }
            }
        }
    }

	# write the changes into grub config
    if ( open $grubFH, ">", $grubFile ) {
        print $grubFH @grub_lines;
        close ($grubFH);
    } else {
        printLog("no $grubFile present or unable to open the file for writing\n");
		return (0);
    }
    return $inserted;
}


# parses sub name from %origConfModules list from given module parameter name
sub getSubName {
	my $module;
	foreach $module ( keys %origConfModules ) {
		if ( $ARGV[1] eq $origConfModules{$module}{name} ) {
			return $module;
		}
	}
	# return empty string if module is not found
	return "";
}


# configures all modules
# if not blacklisted, required and not installed
sub configureAllModules {
	my $module;
	my $exit_status;
	checkRequirements();
	foreach $module (keys %origConfModules) {
		if ( $origConfModules{$module}{installed} eq 'no' &&
   			$localConfModules{$module}{blacklisted} eq 'no' &&
			$origConfModules{$module}{required} eq 'yes' ) {
			configureModule($module);
		}
	}
}


# configures a single module named by $ARGV[1]
# if not blacklisted, required and not installed
sub configureSingleModule {
	my $module;
	my $moduleName = $ARGV[1];
	$module = getSubName();
	if ($module eq "") {
		printLog("wrong module name\n");
		print "wrong module name\n";
		return;
	}
	checkRequirements();
	if ( $localConfModules{$module}{installed} eq 'no' &&
   		$localConfModules{$module}{blacklisted} eq 'no' &&
		$origConfModules{$module}{required} eq 'yes' ) {
		configureModule($module);
	} else {
		print "Module: $moduleName cannot be installed because:\n";
		if ( $localConfModules{$module}{installed} eq 'yes' ) {
			print "- it is already installed\n";
		}
		if ( $localConfModules{$module}{blacklisted} eq 'yes' ) {
			print "- it is blacklisted\n";
		}
		if ( $origConfModules{$module}{required} eq 'no' ) {
			print "- it is not required by this system\n";
		}
		print "1 $localConfModules{$module}{installed}";
		print "2 $localConfModules{$module}{blacklisted}";
		print "3 $origConfModules{$module}{required}";
	}
}

sub reconfigureAllModules {
	my $module;
	my $exit_status;
	checkRequirements();
	foreach $module (keys %origConfModules) {
		if ( $localConfModules{$module}{blacklisted} eq 'no' &&
			$origConfModules{$module}{required} eq 'yes' ) {
			configureModule($module);
		}
	}
}

sub reconfigureSingleModule {
	my $module;
	$module = getSubName();
	if ($module eq "") {
		printLog("wrong module name\n");
		print "wrong module name\n";
		return;
	}
	checkRequirements();
	if ( $localConfModules{$module}{blacklisted} eq 'no' &&
		$origConfModules{$module}{required} eq 'yes' ) {
		configureModule($module);
	}
}


# TODO in next version
sub updateAllModules {
}

# configures a module, does no checks
sub configureModule {
	my $module = shift;
	$module->($module);
}


# TODO in next version
# updates all modules wich are not blacklisted, are required
# and have a new hwid or version
# and additionally configures all new modules
sub configureUpdate {
}


# starts system programs (if necessary) to activate the module changes
sub postConfigure {
	my $sysProgram;
	my $exitStatus;
	foreach $sysProgram (keys %postConfProgram) {
		if ($postConfProgram{$sysProgram}{trigger} == 1 ) {
			$exitStatus = system($postConfProgram{$sysProgram}{command});
			if ($exitStatus == 0) {
				$postConfProgram{$sysProgram}{state} = "failed";
				postSetModulesFailed($sysProgram);
			}
		}
	}
}


# sets all modules dependant of some system program to work to status failed
sub postSetModulesFailed {
	my $sysProgram = shift;
	my $module;
	foreach $module (keys %configuredModules) {
		$configuredModules{$module}{status} = "failed";
	}
}


# lists which modules and system programs where installed, configured
# or executed correctly and which not
sub listSuccess {
	my $confProgram;
	my $confModule;
	my @failedPrograms;
	my @failedModules;
	my @successModules;

	foreach $confProgram (keys %postConfProgram) {
		if ($postConfProgram{$confProgram}{state} eq "failed") {
			push(@failedPrograms, $postConfProgram{$confProgram}{command});
		}
	}
	foreach $confModule (keys %configuredModules) {
		if ($configuredModules{$confModule}{state} eq "failed") {
			push(@failedModules, $confModule);
		}
		if ($configuredModules{$confModule}{state} eq "ok") {
			push(@successModules, $confModule);
		}
	}
	if (@successModules) {
		print "The following modules have been installed successfully:\n";
		printNameDescriptionModules(@successModules);
	}
	if (@failedModules) {
		print "The following modules have failed to be installed:\n";
		printNameDescriptionModules(@failedModules);
	}
	if (@failedPrograms) {
		print "The following post installation programs have failed:\n";
		printNameDescriptionPrograms(@failedPrograms);
	}
}


# print name and description from modules given as array
sub printNameDescriptionModules {
	my @elements = @_;
	foreach (@elements) {
		print "$_: $origConfModules{$_}{description}\n";
	}
}


# print name and description for programs given as array
sub printNameDescriptionPrograms {
	my @elements = @_;
	foreach (@elements) {
		print "$_: $postConfProgram{$_}{description}\n";
	}
}


# show description of module
sub moduleDescription() {
	my $key;
	if ($ARGV[1]) {
		$key = getSubName();
		if ( $key ne "" ) {
            print "$origConfModules{$key}{description}\n";
		} else {
			print "module: $ARGV[1] is not in the modules list\n";
		}
    } else {
		print "missing module name\n";
	}
}

# text to print for help
my $USAGE =<<USAGE;
tuxedo-tomte {COMMAND}
  list                        List all installable modules with detailed status
  description MODULE          Shows the module description
  configure MODULE ...|all    Configure an unconfigured module
  reconfigure MODULE...|all   Reconfigure a configured module
  help                        Prints this message
USAGE


# TODO to be implemented in the future
#  remove MODULE...|ALL        Remove a configured module
#  blacklist MODULE ...        Blacklist a module
#  unblacklist MODULE ...      Unblacklist a module

# prints help
sub help {
	print "$USAGE\n";
	exit 0;
}

sub checkRoot {
	# do not check if not necessary
	if (@ARGV == 0) {
		return;
	}
	if ($ARGV[0] ne ("list" || "configure" || "remove" || "update" ||
			"reconfigure" || "blacklist" || "unblacklist")) {
	   	return;
	}
	if( $> != 0 ) {
		print "this option must be run as root\n";
		exit (0);
	}
}

# just for debug, delete afterwards
#print Dumper \%origConfModules;

#my @edid_data = getEDIDData();
#print Dumper @edid_data;


# TODO Reihenfolge aendern initlogging und checkroot
# TODO uncomment checkRoot()
checkRoot();
initLogging();

# define for each argvalues procedures
# modify $USAGE if any modifications here
if (@ARGV != 0) {
	if ($ARGV[0] eq "list") {
		listStatus();
	} elsif ($ARGV[0] eq "FAI") {
		print "Starting tuxedo-tomte in FAI modus\n".
				"This should not be used in a normal situation\n".
				"only when installing a new system with FAI\n";
	} elsif ($ARGV[0] eq "configure") {
		if (defined $ARGV[1]) {
			if ($ARGV[1] eq "all") {
				configureAllModules();
			} else {
				configureSingleModule();
			}
		} else {
			print "module name or \"all\" missing\n";
		}
	} elsif ($ARGV[0] eq "remove") {
		print "remove, does nothing yet\n";
	} elsif ($ARGV[0] eq "reconfigure") {
		if ($ARGV[1] eq "all") {
			reconfigureAllModules();
		} else {
			reconfigureSingleModule();
		}
	} elsif ($ARGV[0] eq "update") {
		updateAllModules();
	} elsif ($ARGV[0] eq "blacklist") {
		print "blacklist, does nothing yet\n";
	} elsif ($ARGV[0] eq "unblacklist") {
		print "unblacklist, does nothing yet\n";
	} elsif ($ARGV[0] eq "description") {
		moduleDescription();
	} elsif ($ARGV[0] eq "help") {
		help();
	} else {
		print "Unknown command: $ARGV[0]\n";
		help();
	}
} else {
	print "No arguments\n\n";
	help();
}


