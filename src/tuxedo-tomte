#!/usr/bin/perl -w
use strict qw(vars subs);
use warnings;

use File::Copy;

# for OLED backlight and edid decrypt
use FindBin qw($Bin);
use lib "$Bin/.";
use Parse::EDID qw(parse_edid);

# for debugging
use Data::Dumper;

# make sure this is the only running instance
use Fcntl qw(:flock);
open our $file, '<', $0 or die $!;
flock $file, LOCK_EX|LOCK_NB or die "Another instance is already running\n";

my $grubFile = '/etc/default/grub';
my $logDir = '/var/log/tomte/';
my $logFile = $logDir.'tomte.log';
my $LOGFILE;
my $noLogFile = 1;		# 0 = logFile ok, 1 = no logFile
my $noConfigFile = 1;	# 0 = configfile ok, 1 = no configfile
my $configDir = '/etc/tomte/';
my $configFile = $configDir.'tomte.cfg';
my $shareDir = '/usr/share/tuxedo-tomte/';
my $reposList = $shareDir.'repolist.txt';
my $distribution;
my $distributionVersion;


###############################################################################
# initial definition of post configuration modules
#   command		the command to be executed on the system
#   trigger		'1' / 'undef' wether the command should be executed
#   status		'undef' / 'failed' wether the command execution failed
#
my %postConfProgram = (
	updateGrub => {
		command => 'update-grub',
		trigger => 0,
		status => 'undef',
		description => 'reconfigures grub according to grub file',
	},
	updateInitramfs => {
		command => 'update-initramfs -u -k all',
		trigger => 0,
		status => 'undef',
		description => 'updates initramfs',
	},
);


###############################################################################
# list of supported OS versions
# with repective repo entries
#
my %supportedOS = (
	Ubuntu => {
		versions => {
			"18.04" => {
				name => 'bionic',
			},
			"20.04" => {
				name => 'focal',
			},
		},
	},
);


my %repos = (
	"Ubuntu 18.04" => {
		deb => {
			filename => '/etc/apt/sources.list.d/tuxedo-computers.list',
			content => ['deb http://deb.tuxedocomputers.com/ubuntu bionic main'],
		},
		oibaf => {
			filename => '/etc/apt/sources.list.d/oibaf-tuxedo.list',
			content => ['deb http://oibaf.tuxedocomputers.com/ubuntu bionic main'],
		},
		graphics => {
			filename => '/etc/apt/sources.list.d/graphics-tuxedo.list',
			content => ['deb http://graphics.tuxedocomputers.com/ubuntu bionic main'],
		},
		mirrors => {
			filename => '/etc/apt/sources.list',
			content => ['deb http://packages.tuxedocomputers.com/ubuntu/mirror/archive.ubuntu.com/ubuntu bionic main restricted universe multiverse',
'deb http://packages.tuxedocomputers.com/ubuntu/mirror/security.ubuntu.com/ubuntu bionic-security main restricted universe multiverse',
'deb http://packages.tuxedocomputers.com/ubuntu/mirror/archive.ubuntu.com/ubuntu bionic-updates main restricted universe multiverse'],
		},
		name => 'bionic',
	},
	"Ubuntu 20.04" => {
		deb => {
			filename => '/etc/apt/sources.list.d/tuxedo-computers.list',
			content => ['deb http://deb.tuxedocomputers.com/ubuntu focal main'],
		},
		oibaf => {
			filename => '/etc/apt/sources.list.d/oibaf-tuxedo.list',
			content => ['deb http://oibaf.tuxedocomputers.com/ubuntu focal main'],
		},
		graphics => {
			filename => '/etc/apt/sources.list.d/graphics-tuxedo.list',
			content => ['deb http://graphics.tuxedocomputers.com/ubuntu focal main'],
		},
		mirrors => {
			filename => '/etc/apt/sources.list',
			content => ['deb http://packages.tuxedocomputers.com/ubuntu/mirror/archive.ubuntu.com/ubuntu focal main restricted universe multiverse',
'deb http://packages.tuxedocomputers.com/ubuntu/mirror/security.ubuntu.com/ubuntu focal-security main restricted universe multiverse',
'deb http://packages.tuxedocomputers.com/ubuntu/mirror/archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse'],
		},
		name => 'focal',
	},
);


###############################################################################
#
# For each new module add an entry into:
# - %origConfModules
# - checkRequirements()
# - the section with all the modules subroutines

# For changes in %origConfModules make the modifications also in:
# - writeConfigFile()

###############################################################################
# initial definition for all origConfModules/packages
# defined by a 'short name' which is the name without '-'
# e.g. no-boot-on-battery = nobootonbattery
#
#   name			name of package or name of solution,
#					is 'short name' without '-'
#   version			the package or solution version
#					rises if the solution changes
#   installed		'no' not installed / 'yes' installed / 'failed' failed to
#					install, 'undef' if unknown
#   blocked			'yes' or 'no' will not be configured on upgrade, install
#					or deinstall, 'undef' if unknown
#   required		'yes' or 'no' the system requirements are met
#					'undef' if unknown
#					'prerequisite' if essentially needed to be present before
#					anything else
#   hwid			the environment (HW or SW) are in a certain defined state
#					rises if additional HW gets support
#   package			package name or 'no', there is a deb or rpm package as a
#					solution
#   fainame			the name to give to FAI to install a certain package
#   description		A description about the module for the user
#   postconf		command module to execute after installation of module,
#					empty if none, the command of the module is defined in
#					$postConfModule{$postconf}{command}
#	upgrade			if the system determines this is an upgrade then 'yes'
#					else 'no'
#	upgraded		if module was upgraded 'yes', else 'no'
#
my %origConfModules = (
	i8042fix => {
		name => 'i8042-fix',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'no',
		hwid => 1,
		package => 'no',
		fainame => '',
		description => 'Fix for no-keyboard-present after boot on XC1711',
		postconf => 'updateGrub',
		upgrade => '',
		upgraded => '',
	},
	nobootonbattery => {
		name => 'no-boot-on-battery',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'no',
		hwid => 1,
		package => 'no',
		fainame => '',
		description => 'Fix for no-boot-on-battery on BA15',
		postconf => 'updateGrub',
		upgrade => '',
		upgraded => '',
    },
	amdxhcihcdusbquirksuspendfix => {
		name => 'amd-xhci-hcd-usb-quirk-suspend-fix',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'no',
		hwid => 2,
		package => 'no',
		fainame => '',
		description => 'Fix for some AMD devices where the xhci_hcd driver causes a jump out of suspend immediately on entering suspend',
		postconf => 'updateGrub',
		upgrade => '',
		upgraded => '',
	},
	amdgpuwithnvidiafix => {
		name => 'amd-gpu-with-nvidia-fix',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'no',
		hwid => 2,
		package => 'no',
		fainame => '',
		description => 'Enables activation of discrete NVIDIA graphics on devices with built-in AMD graphics. Also enables switching between the two with prime-select',
		postconf => 'updateGrub',
		upgrade => '',
		upgraded => '',
	},
	tuxedocontrolcenter => {
		name => 'tuxedo-control-center',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'yes',
		hwid => 1,
		package => 'yes',
		fainame => '',
		description => 'TUXEDO Control Center Application',
		postconf => '',
		upgrade => '',
		upgraded => '',
	},
	tuxedokeyboard => {
		name => 'tuxedo-keyboard',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'yes',
		hwid => 1,
		package => 'yes',
		fainame => '',
		description => 'Keyboard & keyboard backlight driver for TUXEDO notebooks',
		postconf => '',
		upgrade => '',
		upgraded => '',
	},
	nokeyboardaftersuspendfix => {
		name => 'no-keyboard-after-suspend-fix',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'no',
		hwid => 2,
		package => 'no',
		fainame => '',
		description => 'Fixes no keyboard after suspend problem on XC1511, XC1711, XUX711, InfinityBook Pro 14 v5, AURA 15 gen 1, XA15 gen 10 and XMG Fusion',
		postconf => 'updateGrub',
		upgrade => '',
		upgraded => '',
	},
	backlightfix => {
		name => 'backlight-fix',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'no',
		hwid => 1,
		package => 'no',
		fainame => '',
		description => 'Fixes backlight issues for DX1708 with AUO Model 12701 displays',
		postconf => '',
		upgrade => '',
		upgraded => '',
	},
	tuxedorepos => {
		name => 'tuxedo-repos',
		version => 2,
		installed => 'no',
		blocked => 'no',
		required => 'prerequisite',
		hwid => 1,
		package => 'no',
		fainame => '',
		description => 'Adds the Tuxedo repositories',
		postconf => '',
		upgrade => '',
		upgraded => '',
	},
	corefix => {
		name => 'core-fix',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'no',
		hwid => 1,
		package => 'no',
		fainame => '',
		description => 'ACPI mod to recognize all installed cores correctly',
		postconf => 'updateInitramfs',
		upgrade => '',
		upgraded => '',
	},
	elantechtouchpadfix => {
		name => 'elantech-touchpad-fix',
		version => 1,
		installed => 'no',
		blocked => 'no',
		required => 'no',
		hwid => 1,
		package => 'no',
		fainame => '',
		description => 'Fixes non working Elantech touchpad',
		postconf => 'updateGrub',
		upgrade => '',
		upgraded => '',
	},
);


# hash to load the configfile
# is a copy from origConfModules to evade undefined values
my %localConfModules = %origConfModules;


# empty hash, will be filled with successfully installed modules
# as hashes: {modulename}{status}
# where status should be "success" or "failed"
#
my %configuredModules;


###############################################################################
# reads a file and returns an array with the lines
# chomps the linefeed
# returns undef if file can't be opened
#
sub readFileReturnLines {
	my $file = shift;
	my $FH;
	my @lines;
	if ( open $FH, "<", $file ) {
		chomp(@lines = <$FH>);
		close $FH;
	} else {
		printLog("Err: $!");
		printLog("no $file present or unable to open the file for reading");
		return;
	}
	return @lines;
}



###############################################################################
# find OS name and version and put them into $distribution and
# $distributionVersion
#
sub readOSData {
	my $osReleaseFile = '/etc/os-release';
	my @osReleaseLines;

	@osReleaseLines = readFileReturnLines($osReleaseFile);

	if ( !@osReleaseLines ) {
		print "Can't determine the operating system\n";
		exit (0);
	}
	foreach ( @osReleaseLines ) {
		if ( $_ =~ /^NAME=/ ) {
			$_ =~ /NAME=\"(.*)\"/;
			$distribution = $1;
		}
		if ( $_ =~ /^VERSION_ID=/ ) {
			$_ =~ /VERSION_ID=\"(.*)\"/;
			$distributionVersion = $1;
		}
	}
}



###############################################################################
# checks the list of supported distributions and versions and returns
# 1 if supported
# 0 if not
#
sub isOSSupported {
	if (exists($supportedOS{$distribution}{versions}{$distributionVersion})) {
		return (1);
	}
	return (0);
}


###############################################################################
# check basic requirements the system should fullfill and
# install missing parts
#
sub prerequisites {
	# tuxedorepos
	configureSingleModule('tuxedo-repos');

	#TODO: ALL grubentries should always be checked in case something brakes them
}


###############################################################################
# check whether the module is required for the system
# checks only for hardware
#
sub checkRequirements {
	my $FH;
	my $boardnameFilename = "/sys/class/dmi/id/board_name";
	my @boardname;
	my $boardvendorFilename = "/sys/class/dmi/id/board_vendor";
	my @boardvendor;
	my $biosVersion;

	# these will be installed on all systems, always
	$origConfModules{tuxedokeyboard}{required} = 'yes';
	$origConfModules{tuxedocontrolcenter}{required} = 'yes';

	# load required data into variables
	@boardname = readFileReturnLines($boardnameFilename);
	if ( !@boardname ) {
		printLog("could not open $boardnameFilename $!");
	}
	@boardvendor = readFileReturnLines($boardvendorFilename);
	if ( !@boardvendor ) {
		printLog("could not open $boardvendorFilename $!");
	}

	# check values for each module
	if ($boardname[0] =~ m/(PB50_70DFx,DDx)/) {
		$origConfModules{i8042fix}{required} = 'yes';
	}
	if ($boardname[0] =~ m/(PF5PU1G)/) {
		$origConfModules{nobootonbattery}{required} = 'yes';
	}
	if (($boardname[0] =~ m/(POLARIS1501A1650TI)/) ||
		($boardname[0] =~ m/(POLARIS1501A2060)/) ||
		($boardname[0] =~ m/(POLARIS1701A1650TI)/) ||
		($boardname[0] =~ m/(POLARIS1701A2060)/) ||
		($boardname[0] =~ m/(PULSE1401)/) ||
		($boardname[0] =~ m/(PULSE1501)/) ||
  		($boardname[0] =~ m/(AURA1501)/)) {
		$origConfModules{amdxhcihcdusbquirksuspendfix}{required} = 'yes';
	}
	if (($boardname[0] =~ m/POLARIS1701A1650TI/) ||
		($boardname[0] =~ m/POLARIS1701A2060/) ||
		($boardname[0] =~ m/POLARIS1501A1650TI/) ||
		($boardname[0] =~ m/POLARIS1501A2060/)) {
		$origConfModules{amdgpuwithnvidiafix}{required} = 'yes';
	}
	if (($boardname[0] =~ m/(X170SM)/) ||
		($boardname[0] =~ m/(PB50_70DFx,DDx)/) ||
   		($boardname[0] =~ m/LAPQC71A/) ||
		($boardname[0] =~ m/LAPQC71B/) ||
		($boardname[0] =~ m/N141CU/) ||
   		($boardname[0] =~ m/NH5xAx/) ||
		($boardname[0] =~ m/AURA1501/) ||
		($boardname[0] =~ m/PB50_70DFx,DDx/)) {
		$origConfModules{nokeyboardaftersuspendfix}{required} = 'yes';
	}
	if ($boardname[0] =~ m/X35R/) {
		$origConfModules{elantechtouchpadfix}{required} = 'yes';
	}
	if ($boardname[0] =~ m/(N8xEJEK)/) {
		if (isDisplayPresent("AUO Model 12701 Serial Number 585803690")) {
			$origConfModules{backlightfix}{required} = 'yes';
		}
	}
	# get the BIOS version
	# deactivated but could be useful if version changes in the future
	# $main::biosVersion = `dmidecode -s bios-version`;
	$main::biosVersion = '1.07.04NBC';
	$main::biosVersion =~ s/\s//g;
	if ($boardname[0] =~ m/NH5xAx/) {
		if ($main::biosVersion =~ m/1\.07\.04NBC/) {
			$origConfModules{corefix}{required} = 'yes';
		}
	}
}


###############################################################################
###############################################################################
###############################################################################
# each configure one module from %confModules
# they set 'installed' status and $postConfModule trigger
#
# for keyboard not present on boot
# for XC1711 on all distributions
# - PB50_70DFx,DDx
#
sub i8042fix() {
	my $module = shift;
	my $action = shift;
	my @kernel_parameters = ("i8042.nopnp");
	my $retval;
	if ($action eq 'install') {
		printLog("applying i8042fix");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'upgrade') {
		printLog("upgrading i8042fix");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
}


###############################################################################
# for not being able to boot if system is on battery
# affects BA15
# - PF5PU1G
#
sub nobootonbattery() {
	my $module = shift;
	my $action = shift;
	my @kernel_parameters = ("iommu=soft");
	my $retval;
	if ($action eq 'install') {
		printLog("applying nobootonbattery");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'upgrade') {
		printLog("upgrading nobootonbattery");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
}


###############################################################################
# Fix for some AMD devices where the xhci_hcd driver causes a jump out of
# suspend immediately on entering suspend
# - POLARIS1501A1650TI
# - POLARIS1501A2060
# - POLARIS1701A1650TI
# - POLARIS1701A2060
# - PULSE1401
# - PULSE1501
# - AURA1501
#
sub amdxhcihcdusbquirksuspendfix() {
	my $module = shift;
	my $action = shift;
	my @kernel_parameters = ("xhci_hcd.quirks=1073741824");
	my $retval;
	if ($action eq 'install') {
		printLog("applying amdxhcihcdusbquirksuspendfix");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'upgrade') {
		printLog("upgrading amdxhcihcdusbquirksuspendfix");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
}


###############################################################################
# Enables activation of discrete NVIDIA graphics on devices with built-in AMD
# graphics. Also enables switching between the two with prime-select
# affects:
# - POLARIS1701A1650TI
# - POLARIS1701A2060
# - POLARIS1501A1650TI
# - POLARIS1501A2060
#
sub amdgpuwithnvidiafix() {
	my $module = shift;
	my $action = shift;
	my $retval;
	my $fileName = '/usr/share/X11/xorg.conf.d/00-tuxedo-nvidia-amdgpu-fix.conf';
	my $niceTime = getBackupFileTime();
	my $fileText = "# added by tuxedo-tomte ".$niceTime."\n".
		"Section \"OutputClass\"\n".
		"\tIdentifier \"nvidia\"\n".
    	"\tMatchDriver \"nvidia-drm\"\n".
    	"\tDriver \"nvidia\"\n".
    	"\tOption \"AllowEmptyInitialConfiguration\"\n".
    	"\tModulePath \"/usr/lib/x86_64-linux-gnu/nvidia/xorg\"\n".
    	"\tOption \"PrimaryGPU\" \"Yes\"\n".
		"EndSection\n";
	if ($action eq 'install') {
		printLog("applying amdgpuwithnvidiafix");
		$retval = createFile($fileName, $fileText);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			addToConfiguredModules($module, "success");
			print "Please restart your system\n";
		}
	}
	if ($action eq 'upgrade') {
		printLog("upgrading amdgpuwithnvidiafix");
		$retval = createFile($fileName, $fileText);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			addToConfiguredModules($module, "success");
			print "Please restart your system\n";
		}
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
}


###############################################################################
# TUXEDO Control Center application
#
sub tuxedocontrolcenter() {
	my $module = shift;
	my $action = shift;
	my $retval;
	if ($action eq 'install') {
		# check before if the package is already installed
		if (! isPackageInstalled($origConfModules{$module}{name})) {
			$retval = installPackage($origConfModules{$module}{name});
			if ($retval == 0) {
				$origConfModules{$module}{installed} = "yes";
				$origConfModules{$module}{upgraded} = "yes";
			} else {
				$origConfModules{$module}{installed} = "failed";
			}
		} else {
			printLog("$origConfModules{$module}{name} was already installed");
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
		}
	}
	if ($action eq 'upgrade') {
		printLog("upgrade not necessary for packages");
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
}



###############################################################################
# Keyboard & keyboard backlight driver for TUXEDO notebooks
#
sub tuxedokeyboard() {
	my $module = shift;
	my $action = shift;
	my $retval;
	if ($action eq 'install') {
		# check before if the package is already installed
		if (! isPackageInstalled($origConfModules{$module}{name})) {
			$retval = installPackage($origConfModules{$module}{name});
			if ($retval == 0) {
				$origConfModules{$module}{installed} = "yes";
				$origConfModules{$module}{upgraded} = "yes";
			} else {
				$origConfModules{$module}{installed} = "failed";
			}
		} else {
			printLog("$origConfModules{$module}{name} was already installed");
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
		}
	}
	if ($action eq 'upgrade') {
		printLog("upgrade not necessary for packages");
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
}




###############################################################################
# Checks if the package is installed on the system
# return 1 if yes
# return 0 if no
#
sub isPackageInstalled {
	my $package = shift;
	my $retString = `dpkg-query -W $package`;
	my $retValue = $?;
	if ($retValue != 0) {
		printLog("package $package is not installed");
		return 0;
	} else {
		if ($retString =~ /$package/) {
			printLog("package $package is installed");
			return 1;
		}
	}
}




###############################################################################
# Fix for Tuxedo Notebooks, fixes no keyboard present after suspend on
# - XC1711
# - XUX711
# - NH5xAx
# - AURA1501
# - PB50_70DFx,DDx
#
sub nokeyboardaftersuspendfix() {
	my $module = shift;
	my $action = shift;
	my @kernel_parameters = ("i8042.reset", "i8042.nomux", "i8042.nopnp", "i8042.noloop");
	my $retval;
	if ($action eq 'install') {
		printLog("applying nokeyboardaftersuspendfix");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'upgrade') {
		printLog("upgrading nokeyboardaftersuspendfix");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
}


###############################################################################
# Fixes backlight issue with AUO Model 12701 displays on
# - DX1708 
#
sub backlightfix() {
	my $module = shift;
	my $action = shift;
	my @kernel_parameters = ("i915.enable_dpcd_backlight=1");
	my $retval;
	if ($action eq 'install') {
		printLog("applying backlightfix");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'upgrade') {
		printLog("upgrading backlightfix");
		$retval = insertGrub($module, \@kernel_parameters);
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateGrub}{trigger} = 1;
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
}


###############################################################################
# Adds the Tuxedo repos to the system
#
sub tuxedorepos() {
	my $module = shift;
	my $action = shift;
	my $retval;
	my $exitStatus;

	if ($action eq 'install') {
		printLog("applying tuxedorepos");
		$retval = createRepos();
		if ($retval == 0) {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		} else {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			# update of repos has to be immediate for possible later package
			# installation
			$exitStatus = system('apt update');
			if ($exitStatus == 0) {
				printLog("success: apt update");
			} else {
				printLog("failed: apt update");
				printLog("returned error code: $exitStatus");
			}
			addToConfiguredModules($module, "success");
		}
	}
	if ($action eq 'upgrade') {
		if ( $localConfModules{$module}{version} == 1 ) {
			printLog('uprading repos');
			backupFile('/etc/apt/sources.list');
			$retval = createRepos();
			if ($retval == 0) {
				$origConfModules{$module}{installed} = "failed";
				addToConfiguredModules($module, "failed");
			} else {
				$origConfModules{$module}{installed} = "yes";
				$origConfModules{$module}{upgraded} = "yes";
				# update of repos has to be immediate for possible later package
				# installation
				$exitStatus = system('apt update');
				if ($exitStatus == 0) {
					printLog("success: apt update");
				} else {
					printLog("failed: apt update");
					printLog("returned error code: $exitStatus");
				}
				addToConfiguredModules($module, "success");
			}
		}
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
}



###############################################################################
# Adds the core-fix for certain BIOS versions on certain mainboards
#
sub corefix() {
	my $module = shift;
	my $action = shift;
	if ($main::biosVersion eq "") {
		printLog("BIOS version empty");
		$origConfModules{$module}{installed} = "failed";
		addToConfiguredModules($module, "failed");
		return(0);
	}
	my $amlHookScript = 'tuxedo-corefix-clevo-nh5xax';
	my $amlHookScriptOrig = $shareDir.$amlHookScript;
	my $amlHookDirDest = '/etc/initramfs-tools/hooks/';
	my $amlHookScriptDest = $amlHookDirDest.$amlHookScript;
	my %amlFile = (
		'1.07.04NBC' => 'nh5xax-1.aml',
	);
	my $amlFileOrig = $shareDir.$amlFile{$main::biosVersion};
	my $amlFileDirDest = '/lib/firmware/tuxedo-corefix-clevo-nh5xax/';
	$amlFile{$main::biosVersion} =~ s/-\d*//;
	my $amlFileDest = $amlFileDirDest.$amlFile{$main::biosVersion};

	if ($action eq 'install') {
		printLog("applying corefix");
		mkdir($amlFileDirDest, 0644) unless(-d $amlFileDirDest);
		copy($amlFileOrig, $amlFileDest);
		mkdir($amlHookDirDest, 0644) unless(-d $amlHookDirDest);
		copy($amlHookScriptOrig, $amlHookScriptDest);
		chmod 0700, $amlHookScriptDest;

		if ((-e $amlFileDest) and (-e $amlHookScriptDest)) {
			$origConfModules{$module}{installed} = "yes";
			$origConfModules{$module}{upgraded} = "yes";
			$postConfProgram{updateInitramfs}{trigger} = 1;
			addToConfiguredModules($module, "success");
		} else {
			$origConfModules{$module}{installed} = "failed";
			addToConfiguredModules($module, "failed");
		}
	}
	if ($action eq 'upgrade') {
		# not implemented yet
	}
	if ($action eq 'remove') {
		# not implemented yet
	}
	
}



###############################################################################
# Adds the Tuxedo repos to the system with public key
# returns 1 if successful
# returns 0 if failed
#
sub createRepos {
	my %repoHash;
	my $compDistVer = $distribution.' '.$distributionVersion;
	my $key;
	my $DH;
	my $retval;
	my $sourceline;
	my $sourcesListDir = '/etc/apt/';
	my $sourcesListDirD = '/etc/apt/sources.list.d/';
	my $fileName = $sourcesListDir.'sources.list';
	if (!-d $sourcesListDir) {
		printLog("no $sourcesListDir found (something's really wrong)");
		print "No $sourcesListDir found, something's really wrong ...\n";
		# no apt directory, somethings fishy
		return (0);
	}
	if (!-d $sourcesListDirD) {
		printLog("no $sourcesListDirD found, creating one");
		print "No $sourcesListDirD found, creating one\n";
		mkdir($sourcesListDirD);
	}

	if (-e $fileName) {
		$repoHash{$fileName} = [readFileReturnLines($fileName)];
	}

	# read content from all files *.list into hash
	if (opendir($DH,$sourcesListDirD)) {
		while (readdir $DH) {
			if ( $_ =~ /.*\.list$/ ) {
				$fileName = $sourcesListDirD.$_;
				$repoHash{$fileName} = [readFileReturnLines($fileName)];
			}
		}
		closedir($DH);
	}

	my $firstEntry;
	my $sourcesListBackedup = 0;
	foreach $key (keys %{ $repos{$compDistVer} }) {
		# each line
		if ($key ne 'name') {
			$firstEntry = 1;
			foreach (@{ $repos{$compDistVer}{$key}{content} }) {
				if (!isLinePresent($_, %repoHash)) {
					# make backup if file exists and is first entry into file
					if ( (-e $repos{$compDistVer}{$key}{filename}) && ($firstEntry == 1) ) {
						backupFile($repos{$compDistVer}{$key}{filename});
						$firstEntry = 0;
						if ($repos{$compDistVer}{$key}{filename} eq '/etc/apt/sources.list' ) {
							$sourcesListBackedup = 1;
						}
					}
					# create file + line
					if (! -e $repos{$compDistVer}{$key}{filename}) {
						createFile($repos{$compDistVer}{$key}{filename}, "# Added by TUXEDO Tomte\n$_\n");
						printLog("new file: $repos{$compDistVer}{$key}{filename}");
						printLog("added: $_");
						$firstEntry = 0;
					# or append line
					} else {
						appendFile($repos{$compDistVer}{$key}{filename}, "\n# Added by TUXEDO Tomte\n$_\n");
						printLog("append file: $repos{$compDistVer}{$key}{filename}");
						printLog("added: $_");
					}
				}
			}
		}
	}

	# comment out anything else on sources.list which has
	# deb mirrorurl and not tuxedocomputers
	my $FHsource;
	my @sourcelines;
	# read all the lines
	if (open $FHsource, "<", $sourcesListDir."sources.list") {
		chomp(@sourcelines = <$FHsource>);
		close $FHsource;
		# open for writing
		if (open $FHsource, ">", $sourcesListDir."sources.list") {
			foreach $sourceline (@sourcelines) {
				if (setComment(\$sourceline)) {
					if ($sourcesListBackedup == 0) {
						backupFile('/etc/apt/sources.list');
						$sourcesListBackedup = 1;
					}
				}
				print $FHsource "$sourceline\n";
			}
			close $FHsource;
		}
	}

	# add repo key
	$retval = system('apt-key adv --fetch-keys https://deb.tuxedocomputers.com/0x54840598.pub.asc');
	if ($retval != 0) {
		printLog("Error when apt-key add: $retval");
		printLog("$?");
		printLog("could not add pub key for TUXEDO repo");
		return (0);
	}
	return (1);
}



###############################################################################
# Fixes problem with Elantech touchpad
# affects InfinityBook 14 v2
# - X35R
#
sub elantechtouchpadfix() {
my $module = shift;
my $action = shift;
my @kernel_parameters = ("psmouse.elantech_smbus=0");
my $retval;
if ($action eq 'install') {
printLog("applying elantechtouchpadfix");
$retval = insertGrub($module, \@kernel_parameters);
        if ($retval == 0) {
            $origConfModules{$module}{installed} = "failed";
            addToConfiguredModules($module, "failed");
        } else {
            $origConfModules{$module}{installed} = "yes";
            $origConfModules{$module}{upgraded} = "yes";
            $postConfProgram{updateGrub}{trigger} = 1;
            addToConfiguredModules($module, "success");
        }
    }
    if ($action eq 'upgrade') {
        printLog("upgrading elantechtouchpadfix");
        $retval = insertGrub($module, \@kernel_parameters);
        if ($retval == 0) {
            $origConfModules{$module}{installed} = "failed";
            addToConfiguredModules($module, "failed");
        } else {
            $origConfModules{$module}{installed} = "yes";
            $origConfModules{$module}{upgraded} = "yes";
            $postConfProgram{updateGrub}{trigger} = 1;
            addToConfiguredModules($module, "success");
        }
    }
    if ($action eq 'remove') {
        # not implemented yet
    }
}



###############################################################################
# decides whether the line has to be commented out or not
# returns 0 if nothing changed
# returns 1 if commented out
# modifies the string given to the subroutine
#
sub setComment {
	#TODO: debug stuff
	my $repoline = shift;
	my $tmpline = $$repoline;
	my $FH;
	my @repos;
	my $compDistVers = "$distribution $distributionVersion";
	my $regEx = '^deb.*\.ubuntu\.com\/ubuntu.* '.$repos{$compDistVers}{name}.'.*$';
	if (open $FH, '<', $reposList ) {
		chomp(@repos = <$FH>);
		close $FH;
	} else {
		printLog("Err: $!");
		printLog("could not open repository mirrors list at $reposList");
		print "Could not open repository mirrors list at $reposList\n";
		return (0);
	}
	if ( $$repoline =~ /^deb .*$repos{$compDistVers}{name}.*/ ) {
		# this is a repo line
		# if line matches some official debian country mirror & not tuxedo
		# delete old mirrors.tuxedocomputers.com urls
		if ( (($$repoline =~ m/$regEx/) && !($$repoline =~ m/tuxedocomputers/)) || $$repoline =~ m/^deb http:\/\/mirrors\.tuxedocomputers\.com\// ) {
			$$repoline = "\n#### commented out by TUXEDO Tomte\n"."# $$repoline";
			printLog("commented out: $$repoline");
			return (1);
		}
		# check for repos in comprehensive mirror list
		foreach (@repos) {
			if ( $$repoline =~ /$_/ ) {
				# repo matches
				$$repoline = "\n#### commented out by TUXEDO Tomte\n"."# $$repoline";
				printLog("commented out: $$repoline");
				return (1);
			}
		}
	} else {
		# nothing has to be done
		return (0);
	}
}

###############################################################################
# installs a package by pkcon
# returns the exit code from pkcon
#
sub installPackage {
	my $packageName = shift;
	printLog("install package $packageName");
	my $retval = system("pkcon -y install $packageName");
	printLog("pkcon returns: $retval, while installing $packageName");
	if ($retval != 0) {
		printLog("failed to install $packageName by pkcon");
		printLog("will try again later");
		startTomteDelayed();
	} else {
		printLog("0 is good");
	}
	return $retval;
}


###############################################################################
# creates file with content
# 
sub createFile {
	my $fileName = shift;
	my $fileText = shift;
	my $FH;
	if (-e $fileName) {
		backupFile($fileName);
	}
	if (open $FH, ">",$fileName) {
		print $FH "$fileText";
		close $FH;
		return 1;
	} else {
		printLog("Err: $!");
		printLog("can't open $fileName for writing");
		print "Can't open $fileName for writing\n";
		return 0;
	}
}



###############################################################################
# appends text to the file
# 
sub appendFile {
	my $fileName = shift;
	my $fileText = shift;
	my $FH;
	if (open $FH, ">>",$fileName) {
		print $FH "$fileText";
		close $FH;
		return 1;
	} else {
		printLog("Err: $!");
		printLog("can't open $fileName for writing");
		print "Can't open $fileName for writing\n";
		return 0;
	}
}



###############################################################################
# backups file with timestamp
# 
sub backupFile {
	my $fileName = shift;
	my $backupFile = $fileName.'_'.getBackupFileTime().'.bak';
	if (copy($fileName, $backupFile)) {
		printLog("created backup for $fileName");
		print "created backup for $fileName\n";
		return 1;
	} else {
		printLog("Err: $!");
		printLog("can't create backup file for $fileName");
		print "Can't create backup for $fileName\n";
		return 0;
	}
}



###############################################################################
# checks if the line exists in the file
# 
sub isLinePresent {
	my $line = shift;
	my (%hash) = @_;
	my $filenameKey;
	foreach $filenameKey (keys %hash) {
		foreach (@{ $hash{$filenameKey} }) {
			if ($line eq $_) {
				return (1);
			}
		}
	}
	return (0);
}



###############################################################################
# inserts array values as kernel parameters if not present
# example: my $retval = insertGrub(\@kernel_parameters);
# returns number of inserted parameters
# return value of 0 means it failed
#
sub insertGrub {
    my $grubFH;
    my @grub_lines;
	my $module = shift;
    my $parameters = shift;
    my $parameter;
	my $inserted = 0;

    if ( open $grubFH, "<", $grubFile) {
		while (<$grubFH>) {
	    	push (@grub_lines, $_);
		}
		close $grubFH;
    } else {
		printLog("Err: $!");
		printLog("no $grubFile present or unable to open the file for reading");
		return (0);
    }

    foreach( @grub_lines ) {
		# find the correct line
		if ( $_ =~ /^GRUB_CMDLINE_LINUX_DEFAULT="/ ) {
			foreach $parameter ( @{$parameters} ) {
				if (insertGrubParameter(\$_, \$parameter)) {
					++$inserted;
				}
			}
		}
    }

	# write the changes into grub config
    if ( open $grubFH, ">", $grubFile ) {
		print $grubFH @grub_lines;
		close ($grubFH);
    } else {
		printLog("Err: $!");
		printLog("no $grubFile present or unable to open the file for writing");
		return (0);
    }
    return $inserted;
}


###############################################################################
# inserts a parameter into a grub line
# if the parameter is not present yet
# returns 1 if inserted or already present
#
sub insertGrubParameter {
	my ($line, $parameter) = @_;

	if ($$line =~ /$$parameter/) {
		return (1);
	}
	if ($$line =~ /""/) {
		$$line =~ s/^(GRUB_CMDLINE_LINUX_DEFAULT=".*)"\n/$1$$parameter"\n/;
		printLog("inserted $$parameter into grub line");
	} else {
		$$line =~ s/^(GRUB_CMDLINE_LINUX_DEFAULT=".*)"\n/$1 $$parameter"\n/;
		printLog("inserted $$parameter into grub line");
	}
	return (1);
}



###############################################################################
# initialize logFile
# create one if not existing already
# exits program if logfile can not be created
#
sub initLogging {
	my %options;
	@options{"list", "configure", "reconfigure", "remove", "block", "unblock", "update"} = ();
	# do not log if no arguments
	if (@ARGV == 0) {
		return;
	}
	# do not log if false arguments
	if (! (defined $ARGV[0] and exists $options{$ARGV[0]})) {
		return;
	}

	# check if root permissions available
	if (! isRoot()) {
		return;
	}

	my $timestamp;
	# create logDir if it does not exist
	unless ( -d $logDir ) {
		mkdir($logDir, 0755);
		unless ( -d $logDir ) {
			$noLogFile = 1;
			print "Could not create $logDir\n";
			return;
		}
	}
	# check for logfile
	if ( -f $logFile ) {
		# append if logFile exists
		if ( open $LOGFILE, '>>'.$logFile )
		{
			$noLogFile = 0;
			$timestamp = getLoggingTime();
			close $LOGFILE;
			printLog('starting Tomte');
			return;
		} else {
			printLog("Err: $!");
			$noLogFile =1;
			print "Could not open logFile $logFile\n$!\n";
			exit (0);
		}
	} else {
		# create a new logFile
		if ( open $LOGFILE, '>'.$logFile ) {
			$noLogFile = 0;
			$timestamp = getLoggingTime();
			close $LOGFILE;
			printLog('starting Tomte');
			return;
		} else {
			printLog("Err: $!");
			$noLogFile =1;
			print "Could not create logFile $logFile\n";
			exit (0);
		}
	}
}



###############################################################################
#
sub getLoggingTime {
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $nice_timestamp = sprintf ( "%04d%02d%02d %02d:%02d:%02d",
									$year+1900,$mon+1,$mday,$hour,$min,$sec);
	return $nice_timestamp;
}



###############################################################################
#
sub getBackupFileTime {
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $nice_timestamp = sprintf ( "%04d%02d%02d%02d%02d%02d",
									$year+1900,$mon+1,$mday,$hour,$min,$sec);
	return $nice_timestamp;
}



###############################################################################
# prints into logFile
#
sub printLog {
	my $message = shift;
	if (! $noLogFile) {
		if (open $LOGFILE, '>>'.$logFile) {
			my $timestamp = getLoggingTime();
			print $LOGFILE "$timestamp $message\n";
			close $LOGFILE;
		}
	}
}


###############################################################################
# fills global variable %localConfModules with data from $configFile
# if there is no configFile then it is left empty
# returns '0' if configfile can not be read, else returns '1'
#
sub readConfigFile {
	my %comp;
	my $FH;
	my $shortname;
	if ( open $FH, '<', $configFile ) {
		while ( my $line=<$FH> ) {
			chomp $line;
			# ignore comments
			if ($line =~ /^#/) {
				next;
			}
			# ignore empty lines
			if ($line =~ /^(\s)*$/) {
				next;
			}
			# check data format
			if (validConfigLine($line)) {
				my ($name, @cols) = split /\s+/, $line;
				# check if module name exists in orig and return shortname
				$shortname = validModuleName($name);
				if ($shortname ne '') {
					# @comp values have to be same as in writeConfigFile
					@comp{qw(name version installed blocked required hwid)} = ($name, @cols);
					$localConfModules{$shortname} = { %comp };
					# convert to numbers
					$localConfModules{$shortname}{version} = $localConfModules{$shortname}{version} * 1;
					$localConfModules{$shortname}{hwid} = $localConfModules{$shortname}{hwid} * 1;
				} else {
					printLog("module: $name does not exist");
				}
			} else {
				printLog("invalid line in $configFile");
			}
		}
		close $FH;
	} else {
		printLog("Err: $!");
		printLog("could not open configFile: $configFile $!");
		print "Could not open configfile $configFile\n";
		return (0);
	}
	return (1);
}


###############################################################################
# checks if the line has valid values
# return 0 if invalid, 1 if valid
#
sub validConfigLine {
	my $line = shift;
	if ($line =~ /^[a-zA-Z0-9\-]+\s[a-zA-Z0-9\-]\s(yes|no|failed)\s(yes|no)\s(yes|no|prerequisite)\s[a-zA-Z0-9\-]\s*$/) {
		return (1);
	} else {
		printLog("found invalid configuration line in $configFile:\n$line");
		return (0);
	}
}



###############################################################################
# overwrites $configFile with data from $origConfModules if it does not exist
#
sub writeConfigFile {
	my $FH;
	my $installed;
	my $version;
	my $hwid;
	if ( open $FH, '>', $configFile ) {
		printLog("writing configfile");
		print $FH "# name version installed blocked required hwid\n";
		foreach my $name (sort keys %origConfModules) {
			# values have to be same as in readConfigFile
			if ($origConfModules{$name}{upgrade} eq 'yes') {
				# upgrade available
				if ($origConfModules{$name}{upgraded} eq 'yes') {
					# upgrade was executed
					$version = $origConfModules{$name}{version};
					$hwid = $origConfModules{$name}{hwid};
					$installed = $origConfModules{$name}{installed};
				} else {
					# upgrade was not executed
					if ( $origConfModules{$name}{installed} eq 'yes' ) {
						$version = $localConfModules{$name}{version};
						$hwid = $localConfModules{$name}{hwid};
						$installed = $localConfModules{$name}{installed};
					} else {
						$version = $origConfModules{$name}{version};
						$hwid = $origConfModules{$name}{hwid};
						$installed = $localConfModules{$name}{installed};
					}
				}
			} else {
				# no upgrade available
				$version = $origConfModules{$name}{version};
				$hwid = $origConfModules{$name}{hwid};
				$installed = $origConfModules{$name}{installed};
			}
			print $FH "$origConfModules{$name}{name} ".
					"$version ".
					"$installed ".
					"$origConfModules{$name}{blocked} ".
					"$origConfModules{$name}{required} ".
					"$hwid\n";
		}
		close $FH;
	} else {
		printLog("Err: $!");
		printLog("can't write to $configFile $!");
		print "Can't write to configfile: $configFile\n";
		exit (0);
	}
}


###############################################################################
# check if config file and directory exists
# loads the config or if non existent
# creates a new directory and configfile
#
sub initConfigFile {
	# create configDir if it does not exist
	unless ( -d $configDir ) {
		mkdir($configDir, 0755);
		unless ( -d $configDir ) {
			$noConfigFile = 1;
			printLog("could not create $configDir");
			print "Could not create $configDir\n";
			exit (0);
		}
	}
	# read config file
	if ( -f $configFile ) {
		$noConfigFile = 0;
		readConfigFile();
		return;
	} else {
		# create a new configFile
		printLog("no configfile present ... creating one");
		print "No configfile present ... creating one\n";
		writeConfigFile();
		return;
	}
}


###############################################################################
# searches the sysfs subdirectory for active monitor entries
# and returns them as an array
#
sub findActiveEDIDs {
	my $cards_dir = '/sys/class/drm';
	my $dir_handle;
	my @edidfile;
	my $enabledFileContent;
	my $statusFileContent;

	my $edidTrigger = 0;

	if ( !opendir ($dir_handle, $cards_dir)) {
		printLog("Err: $!");
		printLog("unable to open $cards_dir: $!");
		return @edidfile;
	}
	my @FILES = grep { $_ ne '.' && $_ ne '..' } readdir($dir_handle);
	foreach my $file (@FILES) {
		my $path = "$cards_dir/$file";
		if ( -d $path ) {
			my $enabledFile = "$path/enabled";
			if ( -e $enabledFile ) {
				open(FILE, $enabledFile);
				$enabledFileContent = <FILE>;
				close(FILE);
				if ($enabledFileContent =~ /enabled/) {
					my $statusFile = "$path/status";
					if ( -e $statusFile ) {
						open(FILE2, $statusFile);
						$statusFileContent = <FILE2>;
						if ($statusFileContent =~ /connected/) {
							push @edidfile, "$path/edid";
							$edidTrigger = 1;
						}
					}
				}
			}
		}
	}
	if (! $edidTrigger ) {
		printLog('no enabled and active edid files found!');
	}
	return @edidfile;
}


###############################################################################
# gets valid edid files
# converts edid data into an array of hash references to origConfModules
#
sub getEDIDData {
	my @edidFiles = findActiveEDIDs();
	my @edidRefs;
	my @edidInfo;
	my $FH;
	my $fileContent;
	foreach ( @edidFiles ) {
		if ( open $FH, '<', $_ ) {
			$fileContent = do { local $/; <$FH> };
			close $FH;
			push @edidRefs, parse_edid($fileContent);
		} else {
			printLog("Err: $!");
			printLog("could not open file $_ $!");
		}
	}
	# returns array of hash references to module
	return @edidRefs;
}



###############################################################################
# returns 1 if the display described by a string is connected, otherwise 0
# the requesting string is build by appending the following data as returned by
# edid-decode
# manufacturer_name Model product_code Serial Number serial_number
# the values from manufacturer_name, product_code and serial_number are
# extracted by Parse::EDID
#
sub isDisplayPresent {
	my $edidSearchString = shift;
	my @edidRefs = getEDIDData();
	my $edidInfo;
	foreach my $edidData (@edidRefs) {
		$edidInfo = $$edidData{manufacturer_name}." Model ".$$edidData{product_code}." Serial Number ".$$edidData{serial_number};
		if ($edidInfo =~ /$edidSearchString/) {
			return (1);
		}
	}
	printLog("edid string not found");
	return (0);
}



###############################################################################
# print status from all modules in a nice formated output
# uses the data from the local configuration file if available
# else it checks the hardware
#
# used pattern:
# installed and new module version equal (no update)
# installed	req. old	req. new	notes
# no		no			no			ign
# yes		no			no			installed but not required!
# no		yes			no			ign
# yes		yes			no			ign
# no		no			yes			ign
# yes		no			yes			ign
# no		yes			yes			not inst. but required
# yes		yes			yes			inst. and req.
#
# installed and new module version not equal (update?)
# to be done in next version
#
sub listStatus {
	my @arr = ( ['Name', 'Version', 'Installed', 'Blocked', 'Required'] );
	my $module;
	my $noneRequired = 1;
	my $printIt = 0;
	my $upgradeAvailable = '';

	foreach $module (sort keys %localConfModules) {
		if($origConfModules{$module}{upgrade} eq 'yes') {
			$upgradeAvailable = ' - upgrade available';
		}
		if (($localConfModules{$module}{installed} eq 'yes') &&
		($localConfModules{$module}{required} eq 'no') &&
		($origConfModules{$module}{required} eq 'no')) {
			# module is installed but should not be
			$printIt = 1;
			push(@arr,
				["$localConfModules{$module}{name}",
				"$localConfModules{$module}{version}",
				"$localConfModules{$module}{installed}",
				"$localConfModules{$module}{blocked}",
				"$localConfModules{$module}{required}"]);
		}
		if ($localConfModules{$module}{required} eq 'yes') {
			$noneRequired = 0;
			$printIt = 1;
			push(@arr,
				["$localConfModules{$module}{name}",
				"$localConfModules{$module}{version}",
				"$localConfModules{$module}{installed}",
				"$localConfModules{$module}{blocked}",
				"$localConfModules{$module}{required}$upgradeAvailable"]);
		}
	}
	if ($printIt) {
		print "Only showing fixes that are available for this hardware\n";
		for my $row (@arr) {
			format STDOUT =
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< @<<<<<<< @<<<<<<<<< @<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<
			@$row
.
			write;
		}
	}
	if ($noneRequired) {
		print "No fixes available for this system\n";
	}
}


###############################################################################
# copies values from local configuration module into new configuration module
# copies always 'blocked'
#
sub transferConfigValues {
	my $name;
	foreach $name (sort keys %localConfModules) {
		# always copy blocked status
		$origConfModules{$name}{blocked} = $localConfModules{$name}{blocked};
		if (newVersion($name) or newHwid($name)) {
			# new version or new hwid => upgrade necessary
			$origConfModules{$name}{upgrade} = 'yes';
			$origConfModules{$name}{upgraded} = 'no';
		} else {
			$origConfModules{$name}{installed} = $localConfModules{$name}{installed};
			$origConfModules{$name}{upgrade} = 'no';
			$origConfModules{$name}{upgraded} = 'no';
		}
	}
}



###############################################################################
# returns 0 if no new version
# returns 1 if new version
sub newVersion {
	my $module = shift;
	if ($localConfModules{$module}{version} < $origConfModules{$module}{version}) {
		print "#version: $localConfModules{$module}{version} $origConfModules{$module}{version}\n";
		return 1;
	} else {
		return 0;
	}
}


###############################################################################
# returns 0 if no new hwid
# returns 1 if new hwid
sub newHwid {
	my $module = shift;
	if ($localConfModules{$module}{hwid} < $origConfModules{$module}{hwid}) {
		return 1;
	} else {
		return 0;
	}
}



###############################################################################
# adds module hash to list of configured modules with status
#
sub addToConfiguredModules {
	my $module = shift;
	my $status = shift;
	$configuredModules{$module} = $status;
}



###############################################################################
# parses sub name from %origConfModules list from given module parameter name
# returns the name of the module vector of found
# returns an empty string if not found
#
sub getSubName {
	my $moduleName = shift;
	my $module;
	foreach $module ( keys %origConfModules ) {
		if ( $moduleName eq $origConfModules{$module}{name} ) {
			return $module;
		}
	}
	# return empty string if module is not found
	return "";
}


###############################################################################
# returns the shortname of module if the name is a valid module name
# returns '' if not
#
sub validModuleName {
	my $moduleName = shift;
	my $module;
	foreach $module ( keys %origConfModules ) {
		if (defined $origConfModules{$module}{name}) {
			if ($origConfModules{$module}{name} eq $moduleName) {
				return $module;
			}
		}
	}
	return '';
}



###############################################################################
# configures all modules
# if not blocked, required and not installed
#
# u=upgrade
# c=configure
# R=remove
# .=nothing
#
# installed blocked required	newversion	newhwid
# tomte.cfg	tomte.cfg	check		origConfig	origConfig
# yes		yes			yes			yes			yes		.
# yes		yes			yes			yes			no		.
# yes		yes			yes			no			yes		.
# yes		yes			yes			no			no		.
# yes		yes			no			yes			yes		.
# yes		yes			no			yes			no		.
# yes		yes			no			no			yes		.
# yes		yes			no			no			no		.
# yes		no			yes			yes			yes		u
# yes		no			yes			yes			no		u
# yes		no			yes			no			yes		u
# yes		no			yes			no			no		.
# yes		no			no			yes			yes		R
# yes		no			no			yes			no		R
# yes		no			no			no			yes		R
# yes		no			no			no			no		R
# no		yes			yes			yes			yes		.
# no		yes			yes			yes			no		.
# mo		yes			yes			no			yes		.
# no		yes			yes			no			no		.
# no		yes			no			yes			yes		.
# no		yes			no			yes			no		.
# no		yes			no			no			yes		.
# no		yes			no			no			no		.
# no		no			yes			yes			yes		C
# no		no			yes			yes			no		C
# no		no			yes			no			yes		C
# no		no			yes			no			no		C
# no		no			no			yes			yes		.
# no		no			no			yes			no		.
# no		no			no			no			yes		.
# no		no			no			no			no		.

sub configureAllModules {
	my $module;
	my $exit_status;
	foreach $module (keys %origConfModules) {
		# configure if not installed or failed, not blocked and required
		# must be 'elsif' or else the options could get mixed up
		if ( (($origConfModules{$module}{installed} eq 'no') ||
		   ($origConfModules{$module}{installed} eq 'failed'))	&&
			$localConfModules{$module}{blocked} eq 'no' &&
			$origConfModules{$module}{required} eq 'yes' ) {
			printLog("configure module: $module");
			configureModule($module);
		} elsif ( $origConfModules{$module}{installed} eq 'yes' &&
			$localConfModules{$module}{blocked} eq 'no' &&
			$origConfModules{$module}{required} eq 'yes' &&
   			$origConfModules{$module}{upgrade} eq 'yes' ) {
			# upgrade if new version or hwid
			printLog("upgrade module: $module");
			upgradeModule($module);
		} elsif ( $origConfModules{$module}{installed} eq 'yes' &&
			$localConfModules{$module}{blocked} eq 'no' &&
			$origConfModules{$module}{required} eq 'no' ) {
			# remove if not required any more
			printLog("remove module: $module");
			removeModule($module);
		}
	}
}




###############################################################################
# configures a single module
# if not blocked, required and not installed
#
sub configureSingleModule {
	my $moduleName = shift;
	my $module;
	$module = getSubName($moduleName);
	if ($module eq "") {
		printLog("wrong module name");
		print "Wrong module name\n";
		return;
	}

	if ( $localConfModules{$module}{installed} eq 'no' &&
		$localConfModules{$module}{blocked} eq 'no' &&
		( $origConfModules{$module}{required} eq 'yes' ||
	   	$origConfModules{$module}{required} eq 'prerequisite')) {
		printLog("configure module: $module");
		configureModule($module);
	} elsif ( $origConfModules{$module}{installed} eq 'yes' &&
		$localConfModules{$module}{blocked} eq 'no' &&
		( $origConfModules{$module}{required} eq 'yes' ||
		$origConfModules{$module}{required} eq 'prerequisite') &&
		$origConfModules{$module}{upgrade} eq 'yes' ) {
		# upgrade if new version or hwid
		printLog("upgrade module: $module");
		upgradeModule($module);
	} elsif ( $origConfModules{$module}{required} eq 'prerequisite' ) {
		configureModule($module);
		# do nothing
	} else {
		print "Module: $moduleName cannot be installed because:\n";
		if ( $localConfModules{$module}{installed} eq 'yes' ) {
			print "- it is already installed (maybe use 'reconfigure')\n";
		}
		if ( $localConfModules{$module}{blocked} eq 'yes' ) {
			print "- it is blocked (maybe use 'unblock')\n";
		}
		if ( $origConfModules{$module}{required} eq 'no' ) {
			print "- it is not required by this system (this is the main reason)\n";
		}
	}
}


###############################################################################
# reconfigures all modules if not blocked and if required even if it is
# already installed
#
sub reconfigureAllModules {
	my $module;
	my $exit_status;
	foreach $module (keys %origConfModules) {
		if ( $localConfModules{$module}{blocked} eq 'no' &&
			$origConfModules{$module}{required} eq 'yes' ) {
			printLog("reconfigure module: $module");
			configureModule($module);
		}
	}
}


###############################################################################
# reconfigures a single module if not blocked and if required even if it is
# already installed
#
sub reconfigureSingleModule {
	my $module;
	my $moduleName = $ARGV[1];
	$module = getSubName($moduleName);
	if ($module eq "") {
		printLog("wrong module name");
		print "Wrong module name\n";
		return;
	}

	if ( $localConfModules{$module}{blocked} eq 'no' &&
		$origConfModules{$module}{required} eq 'yes' ) {
		printLog("configure module: $module");
		configureModule($module);
	} else {
		print "Module: $moduleName cannot be installed because:\n";
	}
	if ( $localConfModules{$module}{blocked} eq 'yes' ) {
		print "- it is blocked (maybe use 'unblock')\n";
	}
	if ( $origConfModules{$module}{required} eq 'no' ) {
		print "- it is not required by this system (this is the main reason)\n";
	}
}



###############################################################################
# blocks a module
#
sub block() {
	my $moduleName = $ARGV[1];
	my $module = getSubName($moduleName);
	if ($module eq '') {
		print "Module $moduleName does not exist\n";
		return;
	}
	if ($localConfModules{$module}{blocked} eq 'yes') {
		print "Module $moduleName is already blocked\n";
		return;
	}
	if ($localConfModules{$module}{blocked} eq 'no') {
		print "Blocking module $moduleName\n";
		$origConfModules{$module}{blocked} = 'yes';
		return;
	}
}

###############################################################################
# unblocks a module
#
sub unblock() {
	my $moduleName = $ARGV[1];
	my $module = getSubName($moduleName);
	if ($module eq '') {
		print "Module $moduleName does not exist\n";
		return;
	}
	if ($localConfModules{$module}{blocked} eq 'no') {
		print "Module $moduleName is not blocked\n";
		return;
	}
	if ($localConfModules{$module}{blocked} eq 'yes') {
		print "Unblocking module $moduleName\n";
		$origConfModules{$module}{blocked} = 'no';
		return;
	}
}


###############################################################################
# configures a module, does no checks
#
sub configureModule {
	my $module = shift;
	$module->($module, 'install');
}


###############################################################################
# remove a module, does no checks
#
sub removeModule {
	my $module = shift;
	$module->($module, 'remove');
}



###############################################################################
# configures a module, does no checks
#
sub upgradeModule {
	my $module = shift;
	$module->($module, 'upgrade');
}



###############################################################################
# starts system programs (if necessary) to activate the module changes
#
sub postConfigure {
	my $sysProgram;
	my $exitStatus;
	my $postConfTrigger = 0;
	foreach $sysProgram (keys %postConfProgram) {
		if ($postConfProgram{$sysProgram}{trigger} == 1 ) {
			$exitStatus = system($postConfProgram{$sysProgram}{command});
			if ($exitStatus == 0) {
				printLog("success: $postConfProgram{$sysProgram}{command}");
				postSetModulesState($sysProgram, "success");
			} else {
				$postConfTrigger = 1;
				printLog("failed: $postConfProgram{$sysProgram}{command}");
				printLog("returned error code: $exitStatus");
				postSetModulesState($sysProgram, "failed");
			}
		}
	}
	if ($postConfTrigger == 1) {
		startTomteDelayed();
	}
}




###############################################################################
# starts the tuxedo-tomte service for delayed configuration
#
sub startTomteDelayed {
	my $retVal;
	$retVal = system("systemd-run --on-active=1min tuxedo-tomte configure all");
	printLog("starting systemd-run tuxedo-tomte configure all for delayed configuration");
	printLog("ret value: $retVal");
}



###############################################################################
# sets all modules dependant of some system program to work to status failed
#
sub postSetModulesState {
	my $sysProgram = shift;
	my $status = shift;
	my $module;
	$postConfProgram{$sysProgram}{status} = $status;
	foreach $module (keys %configuredModules) {
		$configuredModules{$module}{status} = $status;
	}
}


###############################################################################
# lists which modules and system programs where installed, configured
# or executed correctly and which not
#
sub listSuccess {
	my $confProgram;
	my $confModule;
	my @failedPrograms;
	my @failedModules;
	my @successModules;
	my $successOrFailed = 0;

	foreach $confProgram (keys %postConfProgram) {
		if ($postConfProgram{$confProgram}{status} eq "failed") {
			$successOrFailed = 1;
			push(@failedPrograms, $postConfProgram{$confProgram}{command});
		}
	}
	foreach $confModule (keys %configuredModules) {
		if ($configuredModules{$confModule} eq "failed") {
			$successOrFailed = 1;
			push(@failedModules, $confModule);
		} elsif ($configuredModules{$confModule} eq "success") {
			$successOrFailed = 1;
			push(@successModules, $confModule);
		}
	}
	print "\n\n";
	if (@successModules) {
		print "The following modules have been installed successfully:\n";
		printNameDescriptionModules(@successModules);
	}
	if (@failedModules) {
		print "The following modules have failed to be installed:\n";
		printNameDescriptionModules(@failedModules);
	}
	if (@failedPrograms) {
		print "The following post installation programs have failed:\n";
		printNameDescriptionPrograms(@failedPrograms);
	}
	if (! $successOrFailed) {
		print "Nothing has been configured\n";
	}
}


###############################################################################
# print name and description from modules given as array
#
sub printNameDescriptionModules {
	my @elements = @_;
	foreach (@elements) {
		print "$origConfModules{$_}{name}: $origConfModules{$_}{description}\n";
	}
}


###############################################################################
# print name and description for programs given as array
#
sub printNameDescriptionPrograms {
	my @elements = @_;
	foreach (@elements) {
		print "$_: $postConfProgram{$_}{description}\n";
	}
}


###############################################################################
# show description of module
#
sub moduleDescription() {
	my $moduleName = $ARGV[1];
	my $module;
	if ($moduleName) {
		$module = getSubName($moduleName);
		if ( $module ne "" ) {
	    print "$origConfModules{$module}{description}\n";
		} else {
			print "module: $moduleName is not in the modules list\n";
		}
    } else {
		print "Missing module name\n";
	}
}


###############################################################################
# text to print for help
#
my $USAGE =<<USAGE;
tuxedo-tomte [COMMAND]
  list                        List all installable modules with detailed status
  description MODULE          Shows the module description
  configure MODULE ...|all    Configure an unconfigured module
  reconfigure MODULE...|all   Reconfigure a configured module
  help                        Prints this message
USAGE


###############################################################################
# TODO to be implemented in the very near future
#  remove MODULE...|ALL        Remove a configured module
#  block MODULE ...            Block a module
#  unblock MODULE ...          Unblock a module



###############################################################################
# prints help
#
sub help {
	print "$USAGE\n";
	exit 0;
}


###############################################################################
# checks if root and returns 1 if yes, otherwise 0
#
sub isRoot {
	# check if root
	if( $> != 0 ) {
		return (0);
	}
	return (1);
}


###############################################################################
# checks system requirements, loads configfile
#
sub prepareValues {
	checkRequirements();
	initConfigFile();
	transferConfigValues();
}


###############################################################################
###############################################################################
# MAIN PROGRAM


readOSData();

if (!isOSSupported()) {
	printLog('OS is not supported');
	print "This OS is not supported\n";
	exit (0);
}

# define for each argvalues procedures
# modify $USAGE if any modifications here

if (@ARGV != 0) {
	my %options;
	@options{"configure", "reconfigure", "remove", "block", "unblock", "update"} = ();
	if (exists $options{$ARGV[0]} && (! isRoot() )) {
		print "You must have root access to use this option\n";
		exit (0);
	}
	if ($ARGV[0] eq "list") {
		initLogging();
		prepareValues();
		listStatus();
	} elsif ($ARGV[0] eq "description") {
		moduleDescription();
	} elsif ($ARGV[0] eq "help") {
		help();
	} elsif ($ARGV[0] eq "FAI") {
		print "Starting tuxedo-tomte in FAI modus\n".
				"This should not be used in a normal situation\n".
				"only when installing a new system with FAI\n";
	} elsif ($ARGV[0] eq "configure") {
		# check if there is a second argument
		if (defined $ARGV[1]) {
			initLogging();
			prepareValues();
			prerequisites();
			if ($ARGV[1] eq "all") {
				configureAllModules();
				postConfigure();
				listSuccess();
				writeConfigFile();
			} else {
				configureSingleModule($ARGV[1]);
				postConfigure();
				listSuccess();
				writeConfigFile();
			}
		} else {
			print "Module name or \"all\" missing\n";
		}
	} elsif ($ARGV[0] eq "remove") {
		print "remove, does nothing yet\n";
	} elsif ($ARGV[0] eq "reconfigure") {
		if (defined $ARGV[1]) {
			initLogging();
			prepareValues();
			prerequisites();
			if ($ARGV[1] eq "all") {
				reconfigureAllModules();
				postConfigure();
				listSuccess();
				writeConfigFile();
			} else {	
				reconfigureSingleModule();
				postConfigure();
				listSuccess();
				writeConfigFile();
			}
		} else {
			print "Module name or \"all\" missing\n";
		}
		#	} elsif ($ARGV[0] eq "update\n") {
		#		print "update does nothing yet\n";
		#		initLogging();
		#		prepareValues();
		#		updateAllModules();
		#		writeConfigFile();
	} elsif ($ARGV[0] eq "block") {
		if (defined $ARGV[1]) {
			initLogging();
			prepareValues();
			block();
			writeConfigFile();
		} else {
			print "Module name missing\n";
		}
	} elsif ($ARGV[0] eq "unblock") {
		if (defined $ARGV[1]) {
			initLogging();
			prepareValues();
			unblock();
			writeConfigFile();
		} else {
			print "Module name missing\n";
		}
	} else {
		print "Unknown command: $ARGV[0]\n";
		help();
	}
} else {
	help();
}


